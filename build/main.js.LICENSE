/******/

// webpackBootstrap

// The module cache

// The require function

// Check if module is in cache

// Create a new module (and put it into the cache)

// Execute the module function

// Return the exports of the module

// Flag the module as loaded

// expose the modules object (__webpack_modules__)

// Load entry module and return exports

// expose the module cache

// define getter function for harmony exports

// define __esModule on exports

// create a fake namespace object

// mode & 1: value is a module id, require it

// mode & 2: merge all properties of value into the ns

// mode & 4: return value when already ns object

// mode & 8|1: behave like require

// getDefaultExport function for compatibility with non-harmony modules

// Object.prototype.hasOwnProperty.call

// __webpack_public_path__

/************************************************************************/

/* 0 */

/***/

// This works in non-strict mode

// This works if eval is allowed (see CSP)

// This works if the window reference is available

// g can still be undefined, but nothing to do about it...

// We return undefined, instead of nothing here, so it's

// easier to handle this case. if(!global) { ...}

/* 1 */

/* WEBPACK VAR INJECTION */

/**
 * Module dependencies.
 */

/**
 * Check if we are running an android browser. That requires us to use
 * ArrayBuffer with polling transports...
 *
 * http://ghinda.net/jpeg-blob-ajax-android/
 */

/**
 * Check if we are running in PhantomJS.
 * Uploading a Blob with PhantomJS does not work correctly, as reported here:
 * https://github.com/ariya/phantomjs/issues/11395
 * @type boolean
 */

/**
 * Current protocol version.
 */

/**
 * Packet types.
 */

/**
 * Async array map using after
 */

/*
 * Decodes data when a payload is maybe expected. Possible binary contents are
 * decoded from their base64 representation
 *
 * @param {String} data, callback method
 * @api public
 */

/**
 * Encodes a packet.
 *
 *     <packet type id> [ <data> ]
 *
 * Example:
 *
 *     5hello world
 *     3
 *     4
 *
 * Binary is encoded in an identical principle
 *
 * @api private
 */

/**
 * Encode packet helpers for binary types
 */

// might be an object with { base64: true, data: dataAsBase64String }

/**
 * Encodes a packet with binary data in a base64 string
 *
 * @param {Object} packet, has `type` and `data`
 * @return {String} base64 encoded message
 */

// Sending data as a utf-8 string

// data fragment is optional

// iPhone Safari doesn't let you apply with typed arrays

/**
 * Decodes a packet. Changes format to Blob if requested.
 *
 * @return {Object} with `type` and `data` (if any)
 * @api private
 */

// String data

/**
 * Decodes a packet encoded in a base64 string
 *
 * @param {String} base64 encoded message
 * @return {Object} with `type` and `data` (if any)
 */

/**
 * Encodes multiple messages (payload).
 *
 *     <length>:data
 *
 * Example:
 *
 *     11:hello world2:hi
 *
 * If any contents are binary, they will be encoded as base64 strings. Base64
 * encoded strings are marked with a b before the length specifier
 *
 * @param {Array} packets
 * @api private
 */

// parser error - ignoring payload

// parser error in individual packet - ignoring payload

// advance cursor

/**
 * Encodes multiple messages (payload) as binary.
 *
 * <1 = binary, 0 = string><number from 0-9><number from 0-9>[...]<number
 * 255><data>
 *
 * Example:
 * 1 3 255 1 2 3, if the binary contents are interpreted as 8 bit integers
 *
 * @param {Array} packets
 * @return {ArrayBuffer} encoded payload
 * @api private
 */

// string/binary identifier + separator = 2

// not true binary

/**
 * Encode as Blob
 */

/*
 * Decodes data when a payload is maybe expected. Strings are decoded by
 * interpreting each byte as a key code for entries marked to start with 0. See
 * description of encodePayloadAsBinary
 *
 * @param {ArrayBuffer} data, callback method
 * @api public
 */

// iPhone Safari doesn't let you apply to typed arrays

/* 2 */

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

// If debug isn't set in LS, and we're in Electron, try to load $DEBUG

/**
 * Enable namespaces listed in `localStorage.debug` initially.
 */

/**
 * This is the web browser implementation of `debug()`.
 *
 * Expose `debug()` as the module.
 */

/**
 * Invokes `console.log()` when available.
 * No-op when `console.log` is not a "function".
 *
 * @api public
 */

// this hackery is required for IE8/9, where

// the `console.log` function doesn't have 'apply'

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */

/**
 * Colorize log arguments if enabled.
 *
 * @api public
 */

// the final "%c" is somewhat tricky, because there could be other

// arguments passed either before or after the %c, so we need to

// figure out the correct index to insert the CSS into

// we only are interested in the *last* %c

// (the user may have provided their own)

/**
 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
 * and the Firebug extension (any Firefox version) are known
 * to support "%c" CSS customizations.
 *
 * TODO: add a `localStorage` variable to explicitly enable/disable colors
 */

// is webkit? http://stackoverflow.com/a/16459606/376773

// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632

// is firebug? http://stackoverflow.com/a/398120/376773

// is firefox >= v31?

// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages

/**
 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
 */

/**
 * Localstorage attempts to return the localstorage.
 *
 * This is necessary because safari throws
 * when a user disables cookies/localstorage
 * and you attempt to access it.
 *
 * @return {LocalStorage}
 * @api private
 */

/**
 * Colors.
 */

/* 3 */

/* 4 */

/* 5 */

/**
 * A socket.io Encoder instance
 *
 * @api public
 */

/**
 * Encode a packet as a single string if non-binary, or as a
 * buffer sequence, depending on packet type.
 *
 * @param {Object} obj - packet object
 * @param {Function} callback - function to handle encodings (likely engine.write)
 * @return Calls callback with Array of encodings
 * @api public
 */

/**
 * Encode packet as string.
 *
 * @param {Object} packet
 * @return {String} encoded
 * @api private
 */

// first is type

// attachments if we have them

// if we have a namespace other than `/`

// we append it followed by a comma `,`

// immediately followed by the id

// json data

/**
 * Encode packet as 'buffer sequence' by removing blobs, and
 * deconstructing packet into object with placeholders and
 * a list of buffers.
 *
 * @param {Object} packet
 * @return {Buffer} encoded
 * @api private
 */

/**
 * A socket.io Decoder instance
 *
 * @return {Object} decoder
 * @api public
 */

/**
 * Mix in `Emitter` with Decoder.
 */

/**
 * A manager of a binary event's 'buffer sequence'. Should
 * be constructed whenever a packet of type BINARY_EVENT is
 * decoded.
 *
 * @param {Object} packet
 * @return {BinaryReconstructor} initialized reconstructor
 * @api private
 */

/**
 * Method to be called when binary data received from connection
 * after a BINARY_EVENT packet.
 *
 * @param {Buffer | ArrayBuffer} binData - the raw binary data received
 * @return {null | Object} returns null if more binary data is expected or
 *   a reconstructed packet object if all buffers have been received.
 * @api private
 */

/**
 * Protocol version.
 *
 * @api public
 */

/**
 * Packet types.
 *
 * @api public
 */

/**
 * Packet type `connect`.
 *
 * @api public
 */

/**
 * Packet type `disconnect`.
 *
 * @api public
 */

/**
 * Packet type `event`.
 *
 * @api public
 */

/**
 * Packet type `ack`.
 *
 * @api public
 */

/**
 * Packet type `error`.
 *
 * @api public
 */

/**
 * Packet type 'binary event'
 *
 * @api public
 */

/**
 * Packet type `binary ack`. For acks with binary arguments.
 *
 * @api public
 */

/**
 * Encoder constructor.
 *
 * @api public
 */

/**
 * Decoder constructor.
 *
 * @api public
 */

// add packet info to beginning of data list

/**
 * Decodes an ecoded packet string into packet JSON.
 *
 * @param {String} obj - encoded packet
 * @return {Object} packet
 * @api public
 */

/**
 * Decode a packet String (JSON data)
 *
 * @param {String} str
 * @return {Object} packet
 * @api private
 */

// look up type

// look up attachments if type binary

// look up namespace (if any)

// look up id

// look up json data

// binary packet's json

// no attachments, labeled binary but no binary data to follow

// non-binary full packet

// raw binary data

// received final buffer

/**
 * Deallocates a parser's resources
 *
 * @api public
 */

// done with buffer list

/**
 * Cleans up binary packet reconstruction variables.
 *
 * @api private
 */

/* 6 */

// browser shim for xmlhttprequest module

// scheme must be same when usign XDomainRequest

// http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx

// XMLHttpRequest can be disabled on IE

// Use XDomainRequest for IE8 if enablesXDR is true

// because loading bar keeps flashing when using jsonp-polling

// https://github.com/yujiosaka/socke.io-ie8-loading-example

/* 7 */

/**
 * Transport abstract constructor.
 *
 * @param {Object} options.
 * @api private
 */

// SSL options for Node.js client

// other options for Node.js client

/**
 * Mix in `Emitter`.
 */

/**
 * Module exports.
 */

/**
 * Emits an error.
 *
 * @param {String} str
 * @return {Transport} for chaining
 * @api public
 */

/**
 * Opens the transport.
 *
 * @api public
 */

/**
 * Closes the transport.
 *
 * @api private
 */

/**
 * Sends multiple packets.
 *
 * @param {Array} packets
 * @api private
 */

/**
 * Called upon open
 *
 * @api private
 */

/**
 * Called with data.
 *
 * @param {String} data
 * @api private
 */

/**
 * Called with a decoded packet.
 */

/**
 * Called upon close.
 *
 * @api private
 */

/* 8 */

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

// all

// specific event

// remove all handlers

// remove specific handler

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

/* 9 */

/**
 * Compiles a querystring
 * Returns string representation of the object
 *
 * @param {Object}
 * @api private
 */

/**
 * Parses a simple querystring into an object
 *
 * @param {String} qs
 * @api private
 */

/* 10 */

/**
 * Parses an URI
 *
 * @author Steven Levithan <stevenlevithan.com> (MIT license)
 * @api private
 */

/* 11 */

// shim for using process in browser

// cached from whatever global is present so that test runners that stub it

// don't break things.  But we need to wrap it in a try catch in case it is

// wrapped in strict mode code which doesn't define any globals.  It's inside a

// function because try/catches deoptimize in certain engines.

//normal enviroments in sane situations

// if setTimeout wasn't available but was latter defined

// when when somebody has screwed with setTimeout but no I.E. maddness

// When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error

// if clearTimeout wasn't available but was latter defined

// When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally

// same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.

// Some versions of I.E. have different rules for clearTimeout vs setTimeout

// v8 likes predictible objects

// empty string to avoid regexp issues

/* 12 */

// module.parent = undefined by default

/* 13 */

/* 14 */

/**
 * Returns true if obj is a buffer or an arraybuffer.
 *
 * @api private
 */

/* 15 */

/**
 * `Manager` constructor.
 *
 * @param {String} engine instance or engine uri/opts
 * @param {Object} options
 * @api public
 */

/**
 * Propagate given event to sockets and emit on `this`
 *
 * @api private
 */

/**
 * Module exports
 */

/**
 * Update `socket.id` of all sockets
 *
 * @api private
 */

/**
 * Sets the `reconnection` config.
 *
 * @param {Boolean} true/false if it should automatically reconnect
 * @return {Manager} self or value
 * @api public
 */

/**
 * Sets the reconnection attempts config.
 *
 * @param {Number} max reconnection attempts before giving up
 * @return {Manager} self or value
 * @api public
 */

/**
 * Sets the delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

/**
 * Sets the maximum delay between reconnections.
 *
 * @param {Number} delay
 * @return {Manager} self or value
 * @api public
 */

/**
 * Sets the connection timeout. `false` to disable
 *
 * @return {Manager} self or value
 * @api public
 */

/**
 * Starts trying to reconnect if reconnection is enabled and we have not
 * started reconnecting yet
 *
 * @api private
 */

// Only try to reconnect if it's the first time we're connecting

// keeps reconnection from firing twice for the same reconnection loop

/**
 * Sets the current transport `socket`.
 *
 * @param {Function} optional, callback
 * @return {Manager} self
 * @api public
 */

// emit `open`

// Only do this if there is no fn to handle the error

// emit `connect_error`

// emit `connect_timeout`

/**
 * Called upon transport open.
 *
 * @api private
 */

// clear old subs

// mark as open

// add new subs

/**
 * Called upon a ping.
 *
 * @api private
 */

/**
 * Called upon a packet.
 *
 * @api private
 */

/**
 * Called with data.
 *
 * @api private
 */

/**
 * Called when parser fully decodes a packet.
 *
 * @api private
 */

/**
 * Called upon socket error.
 *
 * @api private
 */

/**
 * Creates a new socket for the given `nsp`.
 *
 * @return {Socket}
 * @api public
 */

// manually call here since connecting evnet is fired before listening

/**
 * Called upon a socket close.
 *
 * @param {Socket} socket
 */

/**
 * Writes a packet.
 *
 * @param {Object} packet
 * @api private
 */

// add packet to the queue

// encode, then write to engine with result

/**
 * If packet buffer is non-empty, begins encoding the
 * next packet in line.
 *
 * @api private
 */

/**
 * Clean up transport subscriptions and packet buffer.
 *
 * @api private
 */

/**
 * Close the current socket.
 *
 * @api private
 */

// `onclose` will not fire because

// an open event never happened

/**
 * Called upon engine close.
 *
 * @api private
 */

/**
 * Attempt a reconnection.
 *
 * @api private
 */

// check again for the case socket closed in above events

/**
 * Called upon successful reconnect.
 *
 * @api private
 */

/* 16 */

/**
 * Module dependencies
 */

/**
 * Export transports.
 */

/**
 * Polling transport polymorphic constructor.
 * Decides on xhr vs jsonp based on feature detection.
 *
 * @api private
 */

// some user agents have empty `location.port`

/* 17 */

/**
 * Is XHR2 supported?
 */

/**
 * Polling interface.
 *
 * @param {Object} opts
 * @api private
 */

/**
 * Inherits from Transport.
 */

/**
 * Transport name.
 */

/**
 * Opens the socket (triggers polling). We write a PING message to determine
 * when the transport is open.
 *
 * @api private
 */

/**
 * Pauses polling.
 *
 * @param {Function} callback upon buffers are flushed and transport is paused
 * @api private
 */

/**
 * Starts polling cycle.
 *
 * @api public
 */

/**
 * Overloads onData to detect payloads.
 *
 * @api private
 */

// decode payload

// if its a close packet, we close the ongoing requests

// if its the first message we consider the transport open

// otherwise bypass onData and handle the message

// if an event did not trigger closing

// if we got data we're not polling

/**
 * For polling, send a close packet.
 *
 * @api private
 */

// in case we're trying to close while

// handshaking is in progress (GH-164)

/**
 * Writes a packets payload.
 *
 * @param {Array} data packets
 * @param {Function} drain callback
 * @api private
 */

/**
 * Generates uri for connection.
 *
 * @api private
 */

// cache busting is forced

// avoid port if default for schema

// prepend ? to query

/* 18 */

/*
 * Module requirements.
 */

/**
 * Checks for binary data.
 *
 * Right now only Buffer and ArrayBuffer are supported..
 *
 * @param {Object} anything
 * @api public
 */

// see: https://github.com/Automattic/has-binary/pull/4

/* 19 */

/**
 * Return a string representing the specified number.
 *
 * @param {Number} num The number to convert.
 * @returns {String} The string representation of the number.
 * @api public
 */

/**
 * Return the integer value specified by the given string.
 *
 * @param {String} str The string to convert.
 * @returns {Number} The integer value represented by the string.
 * @api public
 */

/**
 * Yeast: A tiny growing id generator.
 *
 * @returns {String} A unique id.
 * @api public
 */

//

// Map each character to its index.

// Expose the `yeast`, `encode` and `decode` functions.

/* 20 */

/* 21 */

/**
 * Internal events (blacklisted).
 * These events can't be emitted by the user.
 *
 * @api private
 */

/**
 * Shortcut to `Emitter#emit`.
 */

/**
 * `Socket` constructor.
 *
 * @api public
 */

// compat

/**
 * Subscribe to open, close and packet events
 *
 * @api private
 */

/**
 * "Opens" the socket.
 *
 * @api public
 */

// ensure open

/**
 * Sends a `message` event.
 *
 * @return {Socket} self
 * @api public
 */

/**
 * Override `emit`.
 * If the event is in `events`, it's emitted normally.
 *
 * @param {String} event name
 * @return {Socket} self
 * @api public
 */

// default

// binary

// event ack callback

/**
 * Sends a packet.
 *
 * @param {Object} packet
 * @api private
 */

/**
 * Called upon engine `open`.
 *
 * @api private
 */

// write connect packet if necessary

/**
 * Called upon engine `close`.
 *
 * @param {String} reason
 * @api private
 */

/**
 * Called with socket packet.
 *
 * @param {Object} packet
 * @api private
 */

/**
 * Called upon a server event.
 *
 * @param {Object} packet
 * @api private
 */

/**
 * Produces an ack callback to emit with an event.
 *
 * @api private
 */

// prevent double callbacks

/**
 * Called upon a server acknowlegement.
 *
 * @param {Object} packet
 * @api private
 */

/**
 * Called upon server connect.
 *
 * @api private
 */

/**
 * Emit buffered events (received and emitted).
 *
 * @api private
 */

/**
 * Called upon server disconnect.
 *
 * @api private
 */

/**
 * Called upon forced client/server side disconnections,
 * this method ensures the manager stops tracking us and
 * that reconnections don't get triggered for this.
 *
 * @api private.
 */

// clean subscriptions to avoid reconnections

/**
 * Disconnects the socket manually.
 *
 * @return {Socket} self
 * @api public
 */

// remove socket from pool

// fire events

/**
 * Sets the compress flag.
 *
 * @param {Boolean} if `true`, compresses the sending data
 * @return {Socket} self
 * @api public
 */

/* 22 */

/* 23 */

/**
 * Helper for subscriptions.
 *
 * @param {Object|EventEmitter} obj with `Emitter` mixin or `EventEmitter`
 * @param {String} event name
 * @param {Function} callback
 * @api public
 */

/* 24 */

/**
 * Slice reference.
 */

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

/* 25 */

/* 26 */

/**
 * Managers cache.
 */

/**
 * Looks up an existing `Manager` for multiplexing.
 * If the user summons:
 *
 *   `io('http://localhost/a');`
 *   `io('http://localhost/b');`
 *
 * We reuse the existing instance based on same scheme/port/host,
 * and we initialize sockets for each namespace.
 *
 * @api public
 */

/**
 *  Helper method to parse query objects to string.
 * @param {object} query
 * @returns {string}
 */

/**
 * `connect`.
 *
 * @param {String} uri
 * @api public
 */

/**
 * Expose constructors for standalone build.
 *
 * @api public
 */

/* 27 */

/**
 * URL parser.
 *
 * @param {String} url
 * @param {Object} An object meant to mimic window.location.
 *                 Defaults to window.location.
 * @api public
 */

// default to window.location

// relative path support

// parse

// make sure we treat `localhost:80` and `localhost` equally

// define unique id

// define href

/* 28 */

/**
 * This is the common logic for both the Node.js and web browser
 * implementations of `debug()`.
 *
 * Expose `debug()` as the module.
 */

/**
 * Coerce `val`.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api private
 */

/**
 * Disable debug output.
 *
 * @api public
 */

/**
 * Returns true if the given mode name is enabled, false otherwise.
 *
 * @param {String} name
 * @return {Boolean}
 * @api public
 */

/**
 * Enables a debug mode by namespaces. This can include modes
 * separated by a colon and wildcards.
 *
 * @param {String} namespaces
 * @api public
 */

// ignore empty strings

/**
 * The currently active debug mode names, and names to skip.
 */

/**
 * Map of special "%n" handling functions, for the debug "format" argument.
 *
 * Valid key names are a single, lowercased letter, i.e. "n".
 */

/**
 * Previously assigned color.
 */

/**
 * Previous log timestamp.
 */

/**
 * Create a debugger with the given `namespace`.
 *
 * @param {String} namespace
 * @return {Function}
 * @api public
 */

// define the `disabled` version

// define the `enabled` version

// set `diff` timestamp

// add the `color` if not set

// anything else let's inspect with %o

// apply any `formatters` transformations

// if we encounter an escaped % then don't increase the array index

// now we need to remove `args[index]` since it's inlined in the `format`

// apply env-specific formatting

/* 29 */

/**
 * Helpers.
 */

/**
 * Pluralization helper.
 */

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @throws {Error} throw an error if val is not a non-empty string or a number
 * @return {String|Number}
 * @api public
 */

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

/* 30 */

/* 31 */

/* 32 */

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

/* 33 */

/*! JSON v3.3.2 | http://bestiejs.github.io/json3 | Copyright 2012-2014, Kit Cambridge | http://kit.mit-license.org */

// Detect the `define` function exposed by asynchronous module loaders. The

// strict `define` check is necessary for compatibility with `r.js`.

// A set of types used to distinguish objects from primitives.

// Public: Initializes JSON 3 using the given `context` object, attaching the

// `stringify` and `parse` functions to the specified `exports` object.

// Native constructor aliases.

// Delegate to the native `stringify` and `parse` implementations.

// Convenience aliases.

// Test the `Date#getUTC*` methods. Based on work by @Yaffle.

// The `getUTCFullYear`, `Month`, and `Date` methods return nonsensical

// results for certain dates in Opera >= 10.53.

// Safari < 2.0.2 stores the internal millisecond time value correctly,

// but clips the values returned by the date methods to the range of

// signed 32-bit integers ([-2 ** 31, 2 ** 31 - 1]).

// Internal: Determines whether the native `JSON.stringify` and `parse`

// implementations are spec-compliant. Based on work by Ken Snyder.

// Return cached feature test result.

// IE <= 7 doesn't support accessing string characters using square

// bracket notation. IE 8 only supports this for primitives.

// Indicates whether both `JSON.stringify` and `JSON.parse` are

// supported.

// Test `JSON.stringify`.

// A test function object with a custom `toJSON` method.

// Firefox 3.1b1 and b2 serialize string, number, and boolean

// primitives as object literals.

// FF 3.1b1, b2, and JSON 2 serialize wrapped primitives as object

// literals.

// FF 3.1b1, 2 throw an error if the value is `null`, `undefined`, or

// does not define a canonical JSON representation (this applies to

// objects with `toJSON` properties as well, *unless* they are nested

// within an object or array).

// IE 8 serializes `undefined` as `"undefined"`. Safari <= 5.1.7 and

// FF 3.1b3 pass this test.

// Safari <= 5.1.7 and FF 3.1b3 throw `Error`s and `TypeError`s,

// respectively, if the value is omitted entirely.

// FF 3.1b1, 2 throw an error if the given value is not a number,

// string, array, object, Boolean, or `null` literal. This applies to

// objects with custom `toJSON` methods as well, unless they are nested

// inside object or array literals. YUI 3.0.0b1 ignores custom `toJSON`

// methods entirely.

// Prototype <= 1.6.1 serializes `[undefined]` as `"[]"` instead of

// `"[null]"`.

// YUI 3.0.0b1 fails to serialize `null` literals.

// FF 3.1b1, 2 halts serialization if an array contains a function:

// `[1, true, getClass, 1]` serializes as "[1,true,],". FF 3.1b3

// elides non-JSON values from objects and arrays, unless they

// define custom `toJSON` methods.

// Simple serialization test. FF 3.1b1 uses Unicode escape sequences

// where character escape codes are expected (e.g., `\b` => `\u0008`).

// FF 3.1b1 and b2 ignore the `filter` and `width` arguments.

// JSON 2, Prototype <= 1.7, and older WebKit builds incorrectly

// serialize extended years.

// The milliseconds are optional in ES 5, but required in 5.1.

// Firefox <= 11.0 incorrectly serializes years prior to 0 as negative

// four-digit years instead of six-digit years. Credits: @Yaffle.

// Safari <= 5.1.5 and Opera >= 10.53 incorrectly serialize millisecond

// values less than 1000. Credits: @Yaffle.

// Test `JSON.parse`.

// FF 3.1b1, b2 will throw an exception if a bare literal is provided.

// Conforming implementations should also coerce the initial argument to

// a string prior to parsing.

// Simple parsing test.

// Safari <= 5.1.2 and FF 3.1b1 allow unescaped tabs in strings.

// FF 4.0 and 4.0.1 allow leading `+` signs and leading

// decimal points. FF 4.0, 4.0.1, and IE 9-10 also allow

// certain octal literals.

// FF 4.0, 4.0.1, and Rhino 1.7R3-R4 allow trailing decimal

// points. These environments, along with FF 3.1b1 and 2,

// also allow trailing commas in JSON objects and arrays.

// Define additional utility methods if the `Date` methods are buggy.

// Internal: Determines if a property is a direct property of the given

// object. Delegates to the native `Object#hasOwnProperty` method.

// The *proto* property cannot be set multiple times in recent

// versions of Firefox and SeaMonkey.

// Safari <= 2.0.3 doesn't implement `Object#hasOwnProperty`, but

// supports the mutable *proto* property.

// Capture and break the object's prototype chain (see section 8.6.2

// of the ES 5.1 spec). The parenthesized expression prevents an

// unsafe transformation by the Closure Compiler.

// Restore the original prototype chain.

// Capture a reference to the top-level `Object` constructor.

// Internal: Normalizes the `for...in` iteration algorithm across

// environments. Each enumerated key is yielded to a `callback` function.

// Tests for bugs in the current environment's `for...in` algorithm. The

// `valueOf` property inherits the non-enumerable flag from

// `Object.prototype` in older versions of IE, Netscape, and Mozilla.

// Iterate over a new instance of the `Properties` class.

// Ignore all properties inherited from `Object.prototype`.

// Normalize the iteration algorithm.

// Safari <= 2.0.4 enumerates shadowed properties twice.

// Create a set of iterated properties.

// Store each property name to prevent double enumeration. The

// `prototype` property of functions is not enumerated due to cross-

// environment inconsistencies.

// Manually invoke the callback for the `constructor` property due to

// cross-environment inconsistencies.

// A list of non-enumerable properties inherited from `Object.prototype`.

// Gecko <= 1.0 enumerates the `prototype` property of functions under

// certain conditions; IE does not.

// Manually invoke the callback for each non-enumerable property.

// Public: Serializes a JavaScript `value` as a JSON string. The optional

// `filter` argument may specify either a function that alters how object and

// array members are serialized, or an array of strings and numbers that

// indicates which properties should be serialized. The optional `width`

// argument may be either a string or number that specifies the indentation

// level of the output.

// The `|| 0` expression is necessary to work around a bug in

// Opera <= 7.54u2 where `0 == -0`, but `String(-0) !== "0"`.

// If the character is a control character, append its Unicode or

// shorthand escape sequence; otherwise, append the character as-is.

// Necessary for host object support.

// Prototype <= 1.6.1 adds non-standard `toJSON` methods to the

// `Number`, `String`, `Date`, and `Array` prototypes. JSON 3

// ignores all `toJSON` methods on these objects unless they are

// defined directly on an instance.

// Dates are serialized according to the `Date#toJSON` method

// specified in ES 5.1 section 15.9.5.44. See section 15.9.1.15

// for the ISO 8601 date time string format.

// Manually compute the year, month, date, hours, minutes,

// seconds, and milliseconds if the `getUTC*` methods are

// buggy. Adapted from @Yaffle's `date-shim` project.

// The hours, minutes, seconds, and milliseconds are obtained by

// decomposing the time within the day. See section 15.9.1.10.

// The `time` value specifies the time within the day (see ES

// 5.1 section 15.9.1.2). The formula `(A % B + B) % B` is used

// to compute `A modulo B`, as the `%` operator does not

// correspond to the `modulo` operation for negative numbers.

// Serialize extended years correctly.

// Months, dates, hours, minutes, and seconds should have two

// digits; milliseconds should have three.

// Milliseconds are optional in ES 5.0, but required in 5.1.

// If a replacement function was provided, call it to obtain the value

// for serialization.

// Booleans are represented literally.

// Recursively serialize objects and arrays.

// JSON numbers must be finite. `Infinity` and `NaN` are serialized as

// `"null"`.

// Strings are double-quoted and escaped.

// Check for cyclic structures. This is a linear search; performance

// is inversely proportional to the number of unique nested objects.

// Cyclic structures cannot be serialized by `JSON.stringify`.

// Add the object to the stack of traversed objects.

// Save the current indentation level and indent one additional level.

// Recursively serialize array elements.

// Recursively serialize object members. Members are selected from

// either a user-specified list of property names, or the object

// itself.

// According to ES 5.1 section 15.12.3: "If `gap` {whitespace}

// is not the empty string, let `member` {quote(property) + ":"}

// be the concatenation of `member` and the `space` character."

// The "`space` character" refers to the literal space

// character, not the `space` {width} argument provided to

// `JSON.stringify`.

// Remove the object from the traversed object stack.

// Public: `JSON.stringify`. See ES 5.1 section 15.12.3.

// Convert the property names array into a makeshift set.

// Convert the `width` to an integer and create a string containing

// `width` number of space characters.

// Opera <= 7.54u2 discards the values associated with empty string keys

// (`""`) only if they are used directly within an object member list

// (e.g., `!("" in { "": 1})`).

// Public: Parses a JSON source string.

// Skip whitespace tokens, including tabs, carriage returns, line

// feeds, and space characters.

// Parse a punctuator token (`{`, `}`, `[`, `]`, `:`, or `,`) at

// the current position.

// `"` delimits a JSON string; advance to the next character and

// begin parsing the string. String tokens are prefixed with the

// sentinel `@` character to distinguish them from punctuators and

// end-of-string tokens.

// Unescaped ASCII control characters (those with a code unit

// less than the space character) are not permitted.

// A reverse solidus (`\`) marks the beginning of an escaped

// control character (including `"`, `\`, and `/`) or Unicode

// escape sequence.

// Revive escaped control characters.

// `\u` marks the beginning of a Unicode escape sequence.

// Advance to the first character and validate the

// four-digit code point.

// A valid sequence comprises four hexdigits (case-

// insensitive) that form a single hexadecimal value.

// Invalid Unicode escape sequence.

// Revive the escaped character.

// Invalid escape sequence.

// An unescaped double-quote character marks the end of the

// string.

// Optimize for the common case where a string is valid.

// Append the string as-is.

// Advance to the next character and return the revived string.

// Unterminated string.

// Parse an integer or floating-point value.

// Parse numbers and literals.

// Advance past the negative sign, if one is specified.

// Parse the integer component.

// Leading zeroes are interpreted as octal literals.

// Illegal octal literal.

// Floats cannot contain a leading decimal point; however, this

// case is already accounted for by the parser.

// Parse the decimal component.

// Illegal trailing decimal.

// Parse exponents. The `e` denoting the exponent is

// case-insensitive.

// Parse the exponential component.

// Skip past the sign following the exponent, if one is

// specified.

// Illegal empty exponent.

// Coerce the parsed value to a JavaScript number.

// A negative sign may only precede numbers.

// `true`, `false`, and `null` literals.

// Unrecognized token.

// Return the sentinel `$` character if the parser has reached the end

// of the source string.

// Unexpected end of input.

// Remove the sentinel `@` character.

// Parse object and array literals.

// Parses a JSON array, returning a new JavaScript array.

// If the array literal contains elements, the current token

// should be a comma separating the previous element from the

// next.

// A `,` must separate each array element.

// Elisions and leading commas are not permitted.

// Unexpected token encountered.

// Parses a JSON object, returning a new JavaScript object.

// If the object literal contains members, the current token

// should be a comma separator.

// A `,` must separate each object member.

// Leading commas are not permitted, object property names must be

// double-quoted strings, and a `:` must separate each property

// name and value.

// `forEach` can't be used to traverse an array in Opera <= 8.54

// because its `Object#hasOwnProperty` implementation returns `false`

// for array indices (e.g., `![1, 2, 3].hasOwnProperty("0")`).

// Public: `JSON.parse`. See ES 5.1 section 15.12.2.

// If a JSON string contains multiple tokens, it is invalid.

// Reset the parser state.

// Export for CommonJS environments.

// Public: Restores the original value of the global `JSON` object and

// returns a reference to the `JSON3` object.

// Export for asynchronous module loaders.

/* 34 */

/* globals __webpack_amd_options__ */

/* 35 */

/**
 * Expose `Emitter`.
 */

/* 36 */

/*global Blob,File*/

/**
 * Module requirements
 */

/**
 * Replaces every Buffer | ArrayBuffer in packet with a numbered placeholder.
 * Anything with blobs or files should be fed through removeBlobs before coming
 * here.
 *
 * @param {Object} packet - socket.io event packet
 * @return {Object} with deconstructed packet and list of buffers
 * @api public
 */

// number of binary 'attachments'

/**
 * Reconstructs a binary packet from its placeholder packet and buffers
 *
 * @param {Object} packet - event packet with placeholders
 * @param {Array} buffers - binary buffers to put in placeholder positions
 * @return {Object} reconstructed packet
 * @api public
 */

// no longer useful

// appropriate buffer (should be natural order anyway)

/**
 * Asynchronously removes Blobs or Files from data via
 * FileReader's readAsArrayBuffer method. Used before encoding
 * data as msgpack. Calls callback with the blobless data.
 *
 * @param {Object} data
 * @param {Function} callback
 * @api private
 */

// convert any blob

// async filereader

// this.result == arraybuffer

// if nothing pending its callback time

// handle array

// and object

/* 37 */

/* 38 */

/**
 * Exports parser
 *
 * @api public
 *
 */

/* 39 */

/**
 * Socket constructor.
 *
 * @param {String|Object} uri or options
 * @param {Object} options
 * @api public
 */

// if no port is specified manually, use the protocol default

// set on handshake

// set on heartbeat

// this is an int

/**
 * Expose deps for legacy compatibility
 * and standalone browser access.
 */

/**
 * Creates transport of the given type.
 *
 * @param {String} transport name
 * @return {Transport}
 * @api private
 */

/**
 * Initializes transport to use and starts probe.
 *
 * @api private
 */

// append engine.io protocol identifier

// transport name

// session id if we already have one

// Emit error on next tick so it can be listened to

// Retry with the next transport if the transport is disabled (jsonp: false)

/**
 * Sets the current transport. Disables the existing one (if any).
 *
 * @api private
 */

// set up transport listeners

// set up transport

/**
 * Probes a transport.
 *
 * @param {String} transport name
 * @api private
 */

// Any callback called by transport should be ignored since now

// Handle any error that happens while probing

// When the socket is closed while we're probing

// When the socket is upgraded while we're probing

// Remove all listeners on the transport and on self

/**
 * Called when connection is deemed open.
 *
 * @api public
 */

// we check for `readyState` in case an `open`

// listener already closed the socket

/**
 * Handles a packet.
 *
 * @api private
 */

// Socket is live - any packet counts

/**
 * Called upon handshake completion.
 *
 * @param {Object} handshake obj
 * @api private
 */

// In case open handler closes socket

// Prolong liveness of socket on heartbeat

/**
 * Resets ping timeout.
 *
 * @api private
 */

/**
 * Pings server every `this.pingInterval` and expects response
 * within `this.pingTimeout` or closes connection.
 *
 * @api private
 */

/**
* Sends a ping packet.
*
* @api private
*/

/**
 * Called on `drain` event
 *
 * @api private
 */

// setting prevBufferLen = 0 is very important

// for example, when upgrading, upgrade packet is sent over,

// and a nonzero prevBufferLen could cause problems on `drain`

/**
 * Flush write buffers.
 *
 * @api private
 */

// keep track of current length of writeBuffer

// splice writeBuffer and callbackBuffer on `drain`

/**
 * Sends a message.
 *
 * @param {String} message.
 * @param {Function} callback function.
 * @param {Object} options.
 * @return {Socket} for chaining.
 * @api public
 */

/**
 * Sends a packet.
 *
 * @param {String} packet type.
 * @param {String} data.
 * @param {Object} options.
 * @param {Function} callback function.
 * @api private
 */

/**
 * Closes the connection.
 *
 * @api private
 */

// wait for upgrade to finish since we can't send packets while pausing a transport

/**
 * Called upon transport error
 *
 * @api private
 */

/**
 * Called upon transport close.
 *
 * @api private
 */

// clear timers

// stop event from firing again for transport

// ensure transport won't stay open

// ignore further transport communication

// set ready state

// clear session id

// emit close event

// clean buffers after, so users can still

// grab the buffers on `close` event

/**
 * Filters upgrades, returning only those matching client transports.
 *
 * @param {Array} server upgrades
 * @api private
 *
 */

/* 40 */

/**
 * Module exports.
 *
 * Logic borrowed from Modernizr:
 *
 *   - https://github.com/Modernizr/Modernizr/blob/master/feature-detects/cors.js
 */

// if XMLHttp support is disabled in IE then it will throw

// when trying to create

/* 41 */

/**
 * Module requirements.
 */

/**
 * Empty function
 */

/**
 * XHR Polling constructor.
 *
 * @param {Object} opts
 * @api public
 */

/**
 * Inherits from Polling.
 */

/**
 * Request constructor
 *
 * @param {Object} options
 * @api public
 */

/**
 * XHR supports binary
 */

/**
 * Creates a request.
 *
 * @param {String} method
 * @api private
 */

/**
 * Sends data.
 *
 * @param {String} data to send.
 * @param {Function} called upon flush.
 * @api private
 */

/**
 * Starts a poll cycle.
 *
 * @api private
 */

/**
 * Creates the XHR object and sends the request.
 *
 * @api private
 */

// This has to be done after open because Firefox is stupid

// http://stackoverflow.com/questions/13216903/get-binary-data-with-xmlhttprequest-in-a-firefox-extension

// ie6 check

// make sure the `error` event handler that's user-set

// does not throw in the same tick and gets caught here

// Need to defer since .create() is called directly fhrom the constructor

// and thus the 'error' event can only be only bound *after* this exception

// occurs.  Therefore, also, we cannot throw here at all.

/**
 * Called upon successful response.
 *
 * @api private
 */

/**
 * Called if we have data.
 *
 * @api private
 */

/**
 * Called upon error.
 *
 * @api private
 */

/**
 * Cleans up house.
 *
 * @api private
 */

// xmlhttprequest

/**
 * Called upon load.
 *
 * @api private
 */

/**
 * Check if it has XDomainRequest.
 *
 * @api private
 */

/**
 * Aborts the request.
 *
 * @api public
 */

/**
 * Aborts pending requests when unloading the window. This is needed to prevent
 * memory leaks (e.g. when using IE) and to ensure that no spurious error is
 * emitted.
 */

/* 42 */

/**
 * Gets the keys for an object.
 *
 * @return {Array} keys
 * @api private
 */

/* 43 */

/**
 * An abstraction for slicing an arraybuffer even when
 * ArrayBuffer.prototype.slice is not supported
 *
 * @api public
 */

/* 44 */

// after first error, rest are passed to err_cb

// future error callbacks will go to error handler

/* 45 */

/*! https://mths.be/wtf8 v1.0.0 by @mathias */

// Detect free variables `exports`

// Detect free variable `module`

/*--------------------------------------------------------------------------*/

// Taken from https://mths.be/punycode

// high surrogate, and there is a next character

// low surrogate

// unmatched surrogate; only append this code unit, in case the next

// code unit is the high surrogate of a surrogate pair

// If we end up here, it’s not a continuation byte.

// 1-byte sequence

// 2-byte sequence

// 3-byte sequence

// 4-byte sequence

// Read the first byte.

// 1-byte sequence (no continuation bytes)

// 3-byte sequence (may include unpaired surrogates)

// Some AMD build optimizers, like r.js, check for specific condition patterns

// like the following:

/* 46 */

/*
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */

// Use a lookup table to find the index.

/* 47 */

/**
 * Create a blob builder even when vendor prefixes exist
 */

/**
 * Check if Blob constructor is supported
 */

/**
 * Helper function that maps ArrayBufferViews to ArrayBuffers
 * Used by BlobBuilder constructor and old browsers that didn't
 * support it in the Blob constructor.
 */

// if this is a subarray, make a copy so we only

// include the subarray region from the underlying buffer

/* 48 */

/* 49 */

/* 50 */

/**
 * Cached regular expressions.
 */

/**
 * Noop.
 */

/**
 * JSONP Polling constructor.
 *
 * @param {Object} opts.
 * @api public
 */

// define global callbacks array if not present

// we do this here (lazily) to avoid unneeded global pollution

// we need to consider multiple engines in the same page

// callback identifier

// add callback to jsonp global

// append to query string

// prevent spurious errors from being emitted when the window is unloaded

/*
 * JSONP only supports binary as base64 encoded strings
 */

/**
 * Closes the socket.
 *
 * @api private
 */

/**
 * Writes with a hidden iframe.
 *
 * @param {String} data to send
 * @param {Function} called upon flush.
 * @api private
 */

// ie6 dynamic iframes with target="" support (thanks Chris Lambacher)

// escape \n to prevent it from being converted into \r\n by some UAs

// double escaping is required for escaped new lines because unescaping of new lines can be done safely on server-side

/* 51 */

/**
 * Get either the `WebSocket` or `MozWebSocket` globals
 * in the browser or try to resolve WebSocket-compatible
 * interface exposed by `ws` for Node-like environment.
 */

/**
 * WebSocket transport constructor.
 *
 * @api {Object} connection options
 * @api public
 */

/**
 * Transport name.
 *
 * @api public
 */

/*
 * WebSockets support binary
 */

/**
 * Opens socket.
 *
 * @api private
 */

/**
 * Adds event listeners to the socket
 *
 * @api private
 */

/**
 * Writes data to socket.
 *
 * @param {Array} array of packets.
 * @api private
 */

// encodePacket efficient as it uses WS framing

// no need for encodePayload

// Sometimes the websocket has already been closed but the browser didn't

// have a chance of informing us about it yet, in that case send will

// throw an error

// TypeError is thrown when passing the second argument on Safari

// fake drain

// defer to next tick to allow Socket to clear writeBuffer

/**
 * Called upon close
 *
 * @api private
 */

/**
 * Closes socket.
 *
 * @api private
 */

// append timestamp to URI

// communicate binary support capabilities

/**
 * Feature detection for WebSocket.
 *
 * @return {Boolean} whether this transport is available.
 * @api public
 */

/* 52 */

/* (ignored) */

/* 53 */

/**
 * JSON parse.
 *
 * @see Based on jQuery#parseJSON (MIT) and JSON2
 * @api private
 */

// Attempt to parse using the native JSON parser first

/* 54 */

/* 55 */

/**
 * Initialize backoff timer with `opts`.
 *
 * - `min` initial timeout in milliseconds [100]
 * - `max` max timeout [10000]
 * - `jitter` [0]
 * - `factor` [2]
 *
 * @param {Object} opts
 * @api public
 */

/**
 * Return the backoff duration.
 *
 * @return {Number}
 * @api public
 */

/**
 * Expose `Backoff`.
 */

/**
 * Reset the number of attempts.
 *
 * @api public
 */

/**
 * Set the minimum duration
 *
 * @api public
 */

/**
 * Set the maximum duration
 *
 * @api public
 */

/**
 * Set the jitter
 *
 * @api public
 */
